- name: "get management token"
  shell: |
    consul acl bootstrap --format json > {{CONSUL_TOKEN_DIR}}/acl-token-bootstrap.json
  args:
    executable: /bin/bash
    creates: "{{CONSUL_TOKEN_DIR}}/acl-token-bootstrap.json"

- name: register BSToken
  shell: |
    /usr/local/bin/jq -r ".SecretID" acl-token-bootstrap.json
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_TOKEN_DIR}}"
  register: BSToken
  
- name: Create the policy files
  block:
  - name: generate policy file
    template:
      src: "{{item}}"
      dest: "{{CONSUL_POLICY_DIR}}/{{item}}"
    loop:
      - "acl-policy-dns.hcl"
      - "acl-policy-server-node.hcl"
      - "acl-policy-service-register.hcl"

  - name: "apply policy to consul server"
    shell: |
      {
        consul acl policy create -name 'acl-policy-dns' -description 'Policy for DNS endpoints' -rules @./acl-policy-dns.hcl
        consul acl policy create -name 'acl-policy-server-node' -description 'Policy for Server nodes' -rules @./acl-policy-server-node.hcl
        consul acl policy create -name 'acl-policy-service-register' -description 'Policy for Service Register' -rules @./acl-policy-service-register.hcl
      } &> /dev/null
    args:
      chdir: "{{CONSUL_POLICY_DIR}}"
      executable: /bin/bash
    environment:
      CONSUL_HTTP_TOKEN: "{{SecretID.stdout}}"
    ignore_errors: true

- name: "Create ACL tokens for each policy"
  shell: |
    if [ ! -s "{{CONSUL_TOKEN_DIR}}/acl-token-dns.json" ];then
      consul acl token create -description 'DNS - Default token' -policy-name acl-policy-dns --format json > {{CONSUL_TOKEN_DIR}}/acl-token-dns.json
    fi
    if [ ! -s "{{CONSUL_TOKEN_DIR}}/acl-token-server.json" ];then
      consul acl token create -description "server agent token" -policy-name acl-policy-server-node --format json > {{CONSUL_TOKEN_DIR}}/acl-token-server.json
    fi
    if [ ! -s "{{CONSUL_TOKEN_DIR}}/acl-token-service-register.json" ];then
      consul acl token create -description "service register token" -policy-name acl-policy-service-register --format json > {{CONSUL_TOKEN_DIR}}/acl-token-service-register.json
    fi
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_TOKEN_DIR}}"
  environment:
    CONSUL_HTTP_TOKEN: "{{BSToken.stdout}}"

- name: register dns token
  shell: |
    /usr/local/bin/jq -r ".SecretID" acl-token-dns.json
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_TOKEN_DIR}}"
  register: DNSToken

- name: register server node token
  shell: |
    /usr/local/bin/jq -r ".SecretID" acl-token-server.json
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_TOKEN_DIR}}"
  register: ServerToken

- name: register service register token
  shell: |
    /usr/local/bin/jq -r ".SecretID" acl-token-service-register.json
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_TOKEN_DIR}}"
  register: service_register_token

- name: generate test scripts
  template:
    src: "testscripts/runtest.sh"
    dest: "/home/{{user}}/runtest.sh"
    owner: "{{user}}"
    group: "{{group}}"
    mode: u+x

- name: ensure home dir owner and group
  file:
    path: "{{home}}"
    state: directory
    owner: "{{user}}"
    group: "{{group}}"
    recurse: yes