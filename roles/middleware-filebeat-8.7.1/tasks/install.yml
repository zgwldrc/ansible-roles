---
- name: user create
  when: user != "root"
  user:
    name: "{{user}}"
    state: present

- name: group create
  when: group != "root"
  group:
    name: "{{group}}"
    state: present

- name: ensure home and relavtive dirs created
  file:
    path: "{{item}}"
    state: directory
    owner: "{{user}}"
    group: "{{group}}"
  loop:
    - "{{home}}"
    - "{{bin_dir}}"
    - "{{conf_dir}}"

- name: check if downloaded
  stat:
    path: "{{download_dest}}"
  register: downloaded

- name: "Download {{systemd_name}} from url"
  when:
    - not downloaded.stat.exists
    - install_from == "url"
  get_url:
    url: "{{urlpath}}"
    dest: "{{download_dest}}"

- name: "copy install file from ansible control node"
  when:
    - not downloaded.stat.exists
    - install_from == "localfile"
  copy:
    src: "{{archive_file}}"
    dest: "{{download_dest}}"

- name: check if exec file already exists
  stat:
    path: "{{exec}}"
  register: r_exec
  
- name: deploy files
  when: not r_exec.stat.exists
  block:
  - name: create temp dir
    tempfile:
      state: directory
    register: r_tempdir

  - name: unarchive
    unarchive:
      src: "{{download_dest}}"
      dest: "{{r_tempdir.path}}"
      remote_src: yes
  - name: "sync to home dir"
    synchronize:
      src: "{{r_tempdir.path}}/filebeat-{{version}}-linux-x86_64/"
      dest: "{{home}}"
    delegate_to: "{{ inventory_hostname }}"

  - name: clean temp dir
    when: r_tempdir is defined
    file: 
      path: "{{r_tempdir.path}}"
      state: absent

- name: ensure exec permission
  file:
    path: "{{exec}}"
    mode: 0755

- name: config file render
  template:
    src: "filebeat-{{mid_type}}.yml"
    dest: "{{conf_dir}}/filebeat.yml"
    mode: 0600

- name: create systemd unit file
  template:
    src: "systemd-unit.service"
    dest: "/etc/systemd/system/{{systemd_name}}.service"

- name: add {{item}} shortcuts commands
  blockinfile:
    path: "/home/{{user}}/.bash_profile"
    marker: "# {{item}} {mark} ANSIBLE MANAGED BLOCK"
    block: |
      alias {{item}}status='sudo /usr/bin/systemctl status {{item}}.service'
      alias {{item}}start='sudo /usr/bin/systemctl start {{item}}.service'
      alias {{item}}stop='sudo /usr/bin/systemctl stop {{item}}.service'
      alias {{item}}restart='sudo /usr/bin/systemctl restart {{item}}.service'
      alias {{item}}log='journalctl -u {{item}}.service -n 100 -f -o cat'
    create: true
  loop:
    - "{{systemd_name}}"

- name: add suduers file
  blockinfile:
    path: "/etc/sudoers.d/{{user}}"
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      {{user}} ALL=(root) NOPASSWD: /usr/bin/systemctl start {{systemd_name}}.service
      {{user}} ALL=(root) NOPASSWD: /usr/bin/systemctl stop {{systemd_name}}.service
      {{user}} ALL=(root) NOPASSWD: /usr/bin/systemctl restart {{systemd_name}}.service
      {{user}} ALL=(root) NOPASSWD: /usr/bin/systemctl status {{systemd_name}}.service

# - name: Create a symbolic link
#   when: exec_link
#   ansible.builtin.file:
#     src: "{{exec}}"
#     dest: "{{exec_link_path}}"
#     owner: "{{user}}"
#     group: "{{group}}"
#     state: link

- name: "keep {{systemd_name}} stopped"
  when: not start_service
  systemd:
    name: "{{systemd_name}}"
    state: stopped

- name: "start and enable {{systemd_name}} systemd service"
  when: start_service
  systemd:
    name: "{{systemd_name}}"
    state: started
    enabled: true
    daemon_reload: true

- name: ensure home dir owner and group
  file:
    path: "{{home}}"
    state: directory
    owner: "{{user}}"
    group: "{{group}}"
    recurse: yes
      
    
