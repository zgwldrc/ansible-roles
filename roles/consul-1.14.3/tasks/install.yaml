---
- name: check if downloaded
  stat:
    path: "{{download_dest}}"
  register: downloaded

- name: "Download {{systemd_name}}"
  when: not downloaded.stat.exists
  get_url:
    url: "{{urlpath}}"
    dest: "{{download_dest}}"

- name: create temp dir
  tempfile:
    state: directory
  register: tempdir

- name: unarchive
  unarchive:
    src: "{{download_dest}}"
    dest: "{{tempdir.path}}"
    remote_src: yes

- name: user create
  user:
    name: "{{user}}"
    state: present

- name: group create
  group:
    name: "{{group}}"
    state: present

- name: ensure home and relavtive dirs created
  file:
    path: "{{item}}"
    state: directory
    owner: "{{user}}"
    group: "{{group}}"
  loop:
    - "{{home}}"
    - "{{CONSUL_DATA_DIR}}"
    - "{{CONSUL_CONFIG_DIR}}"
    - "{{CONSUL_TOKEN_DIR}}"
    - "{{CONSUL_POLICY_DIR}}"

- name: sync to home dir
  ansible.posix.synchronize:
    src: "{{tempdir.path}}/"
    dest: "{{home}}/"
  delegate_to: "{{ inventory_hostname }}"

- name: ensure home dir owner and group
  file:
    path: "{{home}}"
    state: directory
    owner: "{{user}}"
    group: "{{group}}"
    recurse: yes

- name: clean temp dir
  when: tempdir is defined
  file:
    path: "{{tempdir.path}}"
    state: absent

- name: create systemd unit file
  template:
    src: "{{systemd_name}}.service"
    dest: "/etc/systemd/system/{{systemd_name}}.service"

- name: add {{systemd_name}} shortcuts commands
  blockinfile:
    path: "~/.bash_profile"
    marker: "# {{item}} {mark} ANSIBLE MANAGED BLOCK"
    block: |
      alias {{item}}status='systemctl status {{item}}.service'
      alias {{item}}start='systemctl start {{item}}.service'
      alias {{item}}stop='systemctl stop {{item}}.service'
      alias {{item}}restart='systemctl restart {{item}}.service'
    create: true
  loop:
    - "{{systemd_name}}"

- name: Create a symbolic link
  ansible.builtin.file:
    src: "{{home}}/{{systemd_name}}"
    dest: "/usr/bin/{{systemd_name}}"
    owner: "{{user}}"
    group: "{{group}}"
    state: link