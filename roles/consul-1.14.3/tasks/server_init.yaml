- name: gen config
  template:
    src: "{{item}}"
    dest: "{{CONSUL_CONFIG_DIR}}/{{item}}"
  loop:
    - agent-server-secure.hcl
    - agent-server-specific.hcl
    - agent-server-tls.hcl
    - agent-server-acl.hcl

- name: "Generate gossip encryption key configuration - agent-gossip-encryption.hcl"
  shell: |
    echo encrypt = \"$(consul keygen)\" > {{CONSUL_CONFIG_DIR}}/agent-gossip-encryption.hcl
  args:
    creates: "{{CONSUL_CONFIG_DIR}}/agent-gossip-encryption.hcl"
    executable: /bin/bash
    chdir: "{{CONSUL_CONFIG_DIR}}"

- name: "Create CA for Consul datacenter"
  shell: |
    consul tls ca create -domain={{DOMAIN}}
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_CONFIG_DIR}}"
    creates: "{{DOMAIN}}-agent-ca.pem"

- name: "Create server Certificate and key pair"
  shell: |
    consul tls cert create -server -domain {{DOMAIN}} -dc={{DATACENTER}}
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_CONFIG_DIR}}"
    creates: "{{DATACENTER}}-server-{{DOMAIN}}-0.pem"

- name: "Validate configuration"
  shell: |
    consul validate {{CONSUL_CONFIG_DIR}}  
  args:
    executable: /bin/bash
- name: ensure home dir owner and group
  file:
    path: "{{home}}"
    state: directory
    owner: "{{user}}"
    group: "{{group}}"
    recurse: yes

- name: "start and enable {{systemd_name}} systemd service"
  systemd:
    name: "{{systemd_name}}"
    state: started
    enabled: true
    daemon_reload: true

###
- name: "install jq"
  copy:
    src: "jq-linux64"
    dest: /usr/local/bin/jq
    mode: '0755'

- name: "get management token"
  shell: |
    consul acl bootstrap --format json > {{CONSUL_TOKEN_DIR}}/acl-token-bootstrap.json
  args:
    executable: /bin/bash
    creates: "{{CONSUL_TOKEN_DIR}}/acl-token-bootstrap.json"

- name: register SecretID
  shell: |
    jq -r ".SecretID" acl-token-bootstrap.json
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_TOKEN_DIR}}"
  register: SecretID
  
- name: "export token in bash_profile"
  lineinfile:
    path: ~/.bash_profile
    line: "export CONSUL_HTTP_TOKEN=\"{{SecretID.stdout}}\""

- name: Create the policy files
  block:
  - name: generate policy file
    template:
      src: "{{item}}"
      dest: "{{CONSUL_POLICY_DIR}}/{{item}}"
    loop:
      - "acl-policy-dns.hcl"
      - "acl-policy-server-node.hcl"
  - name: "apply policy to consul server"
    shell: |      
      p1=$(consul acl policy list -format=json | jq -r '.[] | select(.Name == "acl-policy-dns").Name')
      if [[ "$p1" != "acl-policy-dns"  ]];then
        consul acl policy create -name 'acl-policy-dns' -description 'Policy for DNS endpoints' -rules @./acl-policy-dns.hcl
      fi

      p2=$(consul acl policy list -format=json | jq -r '.[] | select(.Name == "acl-policy-server-node").Name')
      if [[ "$p2" != "acl-policy-server-node"  ]];then
        consul acl policy create -name 'acl-policy-server-node' -description 'Policy for Server nodes' -rules @./acl-policy-server-node.hcl
      fi
    args:
      chdir: "{{CONSUL_POLICY_DIR}}"
      executable: /bin/bash
    environment:
      CONSUL_HTTP_TOKEN: "{{SecretID.stdout}}"


- name: "Create ACL tokens for each policy"
  shell: |
    if [ ! -s "{{CONSUL_TOKEN_DIR}}/acl-token-dns.json" ];then
      consul acl token create -description 'DNS - Default token' -policy-name acl-policy-dns --format json > {{CONSUL_TOKEN_DIR}}/acl-token-dns.json
    fi
    if [ ! -s "{{CONSUL_TOKEN_DIR}}/acl-token-server.json" ];then
      consul acl token create -description "server agent token" -policy-name acl-policy-server-node  --format json > {{CONSUL_TOKEN_DIR}}/acl-token-server.json
    fi
  args:
    executable: /bin/bash
    chdir: "{{CONSUL_TOKEN_DIR}}"
  environment:
    CONSUL_HTTP_TOKEN: "{{SecretID.stdout}}"

- name: "Assign tokens to the server agent"
  shell: |
    consul acl set-agent-token default $(jq -r ".SecretID" acl-token-dns.json)
    consul acl set-agent-token agent $(jq -r ".SecretID" acl-token-server.json)
  args:
    chdir: "{{CONSUL_TOKEN_DIR}}"
  environment:
    CONSUL_HTTP_TOKEN: "{{SecretID.stdout}}"

- name: ensure home dir owner and group
  file:
    path: "{{home}}"
    state: directory
    owner: "{{user}}"
    group: "{{group}}"
    recurse: yes

- name: create ngx vh config
  when: itgt_ngx_vh_enabled
  block:
  - name: test nginx is installed
    when: ansible_os_family == "Debian"
    command: dpkg -s nginx
    register: nginx_installed
    ignore_errors: true
  - name: test nginx is installed
    when: ansible_os_family == "RedHat"
    command: rpm -q nginx
    register: nginx_installed
    ignore_errors: true
  - name: render vh config file
    when: nginx_installed.rc == 0
    template:
      src: ngx_vh.conf
      dest: /etc/nginx/sites-available/consul.conf
  - name: link to sites-enabled
    when: nginx_installed.rc == 0
    file:
      state: link
      src: /etc/nginx/sites-available/consul.conf
      dest: /etc/nginx/sites-enabled/consul.conf
  - name: nginx reload
    when: nginx_installed.rc == 0
    command: nginx -s reload