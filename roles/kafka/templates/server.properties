{% set number_of_node = ansible_play_hosts | length %}
broker.id={{ (ansible_play_hosts|sort).index(inventory_hostname) }}

{% if (kraft_mode | lower) == "true" %}
{% set _ = listeners.append('CONTROLLER://0.0.0.0:' + controller_port ) %}
node.id={{ (ansible_play_hosts|sort).index(inventory_hostname) }}
process.roles={% for i in process_roles %}{{i}}{% if not loop.last %},{% endif %}{% endfor +%}
controller.quorum.voters={%- for host in (ansible_play_hosts | sort) -%}{%- if 'controller' in hostvars[host]['process_roles'] -%}{{loop.index - 1}}@{{hostvars[host]['ansible_default_ipv4']['address']}}:9093{% if not loop.last %},{% endif %}{%- endif -%}{%- endfor +%}
controller.listener.names={% for i in controller_listener_names %}{{i}}{% if not loop.last %},{% endif %}{% endfor +%}
{% endif %}

listeners={% for i in listeners %}{{i}}{% if not loop.last %},{% endif %}{% endfor +%}
advertised.listeners={% for i in advertised_listeners %}{{i}}{% if not loop.last %},{% endif %}{% endfor +%}
listener.security.protocol.map={% for k, v in listener_security_protocol_map.items() %}{{k}}:{{v}}{% if not loop.last %},{% endif %}{% endfor +%}
inter.broker.listener.name={{inter_broker_listener_name}}
sasl.mechanism.inter.broker.protocol={{sasl_mechanism_inter_broker_protocol}}
sasl.enabled.mechanisms={{sasl_enabled_mechanisms}}

num.network.threads={{num_network_threads}}
num.io.threads={{num_io_threads}}
socket.send.buffer.bytes={{socket_send_buffer_bytes}}
socket.receive.buffer.bytes={{socket_receive_buffer_bytes}}
socket.request.max.bytes={{socket_request_max_bytes}}
log.dirs={{home}}/kafka-logs
num.partitions={{ number_of_node }}
num.recovery.threads.per.data.dir={{num_recovery_threads_per_data_dir}}
default.replication.factor={{ default_replication_factor | default(number_of_node, true)}}
offsets.topic.replication.factor={{ offsets_topic_replication_factor | default(number_of_node, true)}}
transaction.state.log.replication.factor={{ transaction_state_log_replication_factor | default(number_of_node, true)}}
transaction.state.log.min.isr={{ transaction_state_log_min_isr }}
log.retention.hours={{log_retention_hours}}
{% if log_retention_bytes > 0 %}
log.retention.bytes={{log_retention_bytes}}
{% endif %}
log.segment.bytes=1073741824
log.retention.check.interval.ms=300000
max.message.bytes={{max_message_bytes}}
{% if (kraft_mode | lower) == "false" %}
zookeeper.connect={% for host in ansible_play_hosts %}{{hostvars[host]['ansible_default_ipv4']['address']}}:2181{% if not loop.last %},{% endif %}{% endfor +%}
zookeeper.connection.timeout.ms=6000
{% endif %}
# group.initial.rebalance.delay.ms=0
auto.create.topics.enable={{auto_create_topics_enable|lower}}


{% if _sasl_plain_enabled | lower == "true" %}
authorizer.class.name=kafka.security.authorizer.AclAuthorizer
allow.everyone.if.no.acl.found=true
super.users=User:admin
{% endif %}
